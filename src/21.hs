import Aoc
import Data.Function
import Data.List
import Data.List.Split
import Data.Map (Map)
import qualified Data.Map as Map
import Data.Maybe

input = "../.. => .../#.#/...\n#./.. => ..#/..#/#..\n##/.. => .../#../..#\n.#/#. => #../.../...\n##/#. => #.#/.#./#..\n##/## => ..#/#.#/..#\n.../.../... => .#../#..#/#.../.#..\n#../.../... => ..##/..##/.#.#/....\n.#./.../... => ..##/..##/.###/##..\n##./.../... => ..../.##./#.##/..#.\n#.#/.../... => ####/#.##/#.##/#.#.\n###/.../... => #..#/..#./..../##.#\n.#./#../... => ..#./.#../...#/#.##\n##./#../... => ..../#.##/#..#/.#..\n..#/#../... => ##.#/####/###./###.\n#.#/#../... => ..../#.##/.###/#.#.\n.##/#../... => ..#./##.#/####/..##\n###/#../... => ..#./.##./...#/..#.\n.../.#./... => .###/#.../.#../####\n#../.#./... => ###./.#.#/#.##/##.#\n.#./.#./... => ..##/..#./###./..#.\n##./.#./... => #..#/..#./###./...#\n#.#/.#./... => #.../##.#/#.##/#..#\n###/.#./... => ...#/#..#/####/##.#\n.#./##./... => #.##/#.##/..../#.#.\n##./##./... => ..##/###./..#./####\n..#/##./... => ..../##../##.#/.##.\n#.#/##./... => ##../####/####/.#.#\n.##/##./... => ..../##.#/.###/##..\n###/##./... => .#../#.#./.#../..##\n.../#.#/... => ####/#.#./..##/#..#\n#../#.#/... => .#../.#../#..#/....\n.#./#.#/... => ..##/.##./####/#.#.\n##./#.#/... => ..#./###./.#../....\n#.#/#.#/... => ..#./..#./...#/#...\n###/#.#/... => ###./.#../##../####\n.../###/... => #.##/####/####/..##\n#../###/... => .#.#/...#/###./...#\n.#./###/... => ..../.#.#/.#../....\n##./###/... => ...#/.###/..../.##.\n#.#/###/... => ..##/###./.#../#..#\n###/###/... => .###/..#./..#./.###\n..#/.../#.. => .##./###./####/#.#.\n#.#/.../#.. => ####/#.../#.../..##\n.##/.../#.. => ###./#..#/..#./.#..\n###/.../#.. => .###/.##./#.#./.###\n.##/#../#.. => ##.#/...#/.#.#/...#\n###/#../#.. => #.##/..#./..../#..#\n..#/.#./#.. => #..#/##.#/.##./####\n#.#/.#./#.. => ###./..##/#..#/#..#\n.##/.#./#.. => .#../..../...#/...#\n###/.#./#.. => .#../##../.###/..#.\n.##/##./#.. => ##../..##/##../##.#\n###/##./#.. => #.##/#..#/.###/####\n#../..#/#.. => ##.#/####/#.../..##\n.#./..#/#.. => #..#/..../..../###.\n##./..#/#.. => #..#/##.#/##.#/#.#.\n#.#/..#/#.. => .###/##.#/####/#...\n.##/..#/#.. => ####/.##./...#/#..#\n###/..#/#.. => .#.#/####/##.#/...#\n#../#.#/#.. => ..##/.##./..##/##..\n.#./#.#/#.. => #.../##../..##/..#.\n##./#.#/#.. => ...#/##.#/#..#/.#..\n..#/#.#/#.. => #.#./##../#.##/###.\n#.#/#.#/#.. => ##../##.#/#.#./....\n.##/#.#/#.. => ####/...#/####/.#..\n###/#.#/#.. => ..../.#../.#../....\n#../.##/#.. => .#.#/..#./#..#/.###\n.#./.##/#.. => #.../.#.#/.###/.##.\n##./.##/#.. => #.#./#.#./.#../###.\n#.#/.##/#.. => ####/##../.##./####\n.##/.##/#.. => #.../#.#./#.##/###.\n###/.##/#.. => ####/####/..../####\n#../###/#.. => ####/.##./...#/##.#\n.#./###/#.. => .#../#.##/#..#/..##\n##./###/#.. => #.#./..##/#.../..##\n..#/###/#.. => #.##/.###/#.#./###.\n#.#/###/#.. => #.##/#.##/..../#..#\n.##/###/#.. => .##./#.#./..##/####\n###/###/#.. => .##./#..#/#.../###.\n.#./#.#/.#. => #.#./#..#/#..#/##.#\n##./#.#/.#. => ...#/#.#./##.#/###.\n#.#/#.#/.#. => ##.#/..##/##.#/#.##\n###/#.#/.#. => .#.#/..#./##../.##.\n.#./###/.#. => #..#/..#./..##/#...\n##./###/.#. => ####/.#.#/####/..#.\n#.#/###/.#. => #.#./..##/##../#..#\n###/###/.#. => ...#/..../..../#.#.\n#.#/..#/##. => ..#./.##./###./.#.#\n###/..#/##. => #.../###./...#/####\n.##/#.#/##. => ..../..../.###/##..\n###/#.#/##. => ##../..../#.#./.##.\n#.#/.##/##. => .#.#/##../..##/#.#.\n###/.##/##. => ###./####/...#/.#..\n.##/###/##. => ..##/#.../..##/.#.#\n###/###/##. => ..##/...#/.###/.#..\n#.#/.../#.# => ..##/#.../##.#/....\n###/.../#.# => #.##/#..#/..../##..\n###/#../#.# => #.../..../##.#/..#.\n#.#/.#./#.# => ###./..##/.#../.##.\n###/.#./#.# => ..../#..#/.###/#..#\n###/##./#.# => .#.#/###./##.#/.###\n#.#/#.#/#.# => ..../..../.##./#..#\n###/#.#/#.# => .###/.#.#/...#/.###\n#.#/###/#.# => .#.#/##../.#../.#..\n###/###/#.# => .#.#/.##./#.##/....\n###/#.#/### => ..#./..#./..#./..##\n###/###/### => ##.#/..##/.#.#/...."

type Grid = [String]

parseInput :: String -> Map Grid Grid
parseInput = Map.fromList . concatMap parseLine . lines
  where
    parseLine s = case splitOn " => " s & map (splitOn "/") of
      [a,b] ->
        iterate (reverse . transpose) a & take 4 & concatMap (\a -> [(a,b), (reverse a,b)])
      _ -> error "invalid input"

getMap :: Map Grid Grid -> Grid -> Grid
getMap m k = Map.lookup k m & fromJust

simulateStep :: Map Grid Grid -> Grid -> Grid
simulateStep rules grid = chunksOf size grid & concatMap mapChunk
  where
    size = if even (length grid) then 2 else 3
    mapChunk = map concat . transpose . map (getMap rules) . transpose . map (chunksOf size)

simulate :: Map Grid Grid -> Int -> Int
simulate rules times = concat finalGrid & filter (=='#') & length
  where finalGrid = iterate (simulateStep rules) [".#.","..#","###"] !! times

solveParts :: Int -> (Int,Int)
solveParts _ = (simulate rules 5, simulate rules 18)
  where rules = parseInput input

main = Aoc.timer solveParts
